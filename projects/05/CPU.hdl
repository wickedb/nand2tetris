// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    
    //According to the block diagram, theres 2xMux16, Areg, Dreg, PC, and ALU
    
    // instruction[15] => the opcode for the instructions 
    // opcode 0 = Ainstruction
    // opcode 1 = Cinstruction
    
    // Cinstruction - The first and second d-bits code whether to store the computed value in the A 	
    // register and in the D register, respectively
    // instruction[5] = d1 => Store in A reg
    // instruction[4] = d2 => Store in D reg
    // instruction[3] = d3 => Mem[A]
    
    And(a=instruction[15], b=instruction[5], out=CInstructionStoreA);
    Not(in=instruction[15], out=AInstruction);
    Or(a=AInstruction, b=CInstructionStoreA, out=LoadAreg);
    And(a=instruction[15], b=instruction[4], out=LoadDreg);
    
    Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=AregIN);
    ARegister(in=AregIN, load=LoadAreg, out=AregOut, out[0..14]=addressM);
    
    DRegister(in=ALUoutput, load=LoadDreg, out=DregOut);
    // Cinstruction - instruction[12] => does alu operate on D and A regs or D and M regs
    Mux16(a=AregOut, b=inM, sel=instruction[12], out=ALUInput);
    
    //The spec is on page 80 for the ALU control bits 
    ALU(x=DregOut, y=ALUInput, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=zero, ng=negative);
    // instruction[3] = d3 => write to Mem[A], instruction[15] => C or A instruction
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    
    // Taking care of jumps 
    // C instruction, the LSB three bits control jumps 
    
    Not(in=negative, out=notnegative);
    Not(in=zero, out=notzero);
    And(a=notzero, b=notnegative, out=positive);
    
    And(a=negative, b=instruction[2], out=JNeg);
    And(a=zero, b=instruction[1], out=JZero);
    And(a=positive, b=instruction[0], out=JPos);
    
    Or(a=JNeg, b=JZero, out=IsJump);
    Or(a=IsJump, b=JPos, out=IsActuallyJump);
    And(a=instruction[15], b=IsActuallyJump, out=jump);
    Not(in=jump, out=increment);
    
    PC(in=AregOut, load=jump, inc=increment, reset=reset, out[0..14]=pc);

    
}
